{"version":3,"sources":["../../../src/export/fork-bundleAsync.ts"],"sourcesContent":["import { ExpoConfig, getConfigFilePaths, Platform, ProjectConfig } from '@expo/config';\nimport { LoadOptions } from '@expo/metro-config';\nimport { SerialAsset } from '@expo/metro-config/build/serializer/serializerAssets';\nimport getMetroAssets from '@expo/metro-config/build/transform-worker/getAssets';\nimport assert from 'assert';\nimport Metro, { MixedOutput, Module, ReadOnlyGraph } from 'metro';\nimport type { TransformInputOptions } from 'metro/src/DeltaBundler/types';\nimport IncrementalBundler from 'metro/src/IncrementalBundler';\nimport Server from 'metro/src/Server';\nimport splitBundleOptions from 'metro/src/lib/splitBundleOptions';\nimport type {\n  ResolverInputOptions,\n  BundleOptions as MetroBundleOptions,\n} from 'metro/src/shared/types';\nimport { ConfigT } from 'metro-config';\nimport path from 'path';\n\nimport { isEnableHermesManaged, maybeThrowFromInconsistentEngineAsync } from './exportHermes';\nimport { loadMetroConfigAsync } from '../start/server/metro/instantiateMetro';\nimport { getEntryWithServerRoot } from '../start/server/middleware/ManifestMiddleware';\nimport {\n  ExpoMetroBundleOptions,\n  getMetroDirectBundleOptionsForExpoConfig,\n} from '../start/server/middleware/metroOptions';\n\nexport type MetroDevServerOptions = LoadOptions;\n\nexport type BundleOptions = {\n  entryPoint: string;\n  platform: 'android' | 'ios' | 'web';\n  dev?: boolean;\n  minify?: boolean;\n  sourceMapUrl?: string;\n  sourcemaps?: boolean;\n};\nexport type BundleAssetWithFileHashes = Metro.AssetData & {\n  fileHashes: string[]; // added by the hashAssets asset plugin\n};\nexport type BundleOutput = {\n  artifacts: SerialAsset[];\n  assets: readonly BundleAssetWithFileHashes[];\n};\n\nlet nextBuildID = 0;\n\nasync function assertEngineMismatchAsync(\n  projectRoot: string,\n  exp: Pick<ExpoConfig, 'ios' | 'android' | 'jsEngine'>,\n  platform: Platform\n) {\n  const isHermesManaged = isEnableHermesManaged(exp, platform);\n\n  const paths = getConfigFilePaths(projectRoot);\n  const configFilePath = paths.dynamicConfigPath ?? paths.staticConfigPath ?? 'app.json';\n  await maybeThrowFromInconsistentEngineAsync(\n    projectRoot,\n    configFilePath,\n    platform,\n    isHermesManaged\n  );\n}\n\nexport async function createBundlesAsync(\n  projectRoot: string,\n  projectConfig: ProjectConfig,\n  bundleOptions: {\n    clear?: boolean;\n    maxWorkers?: number;\n    platforms: Platform[];\n    dev?: boolean;\n    minify?: boolean;\n    sourcemaps?: boolean;\n    entryPoint?: string;\n  }\n): Promise<Partial<Record<Platform, BundleOutput>>> {\n  if (!bundleOptions.platforms.length) {\n    return {};\n  }\n  const { exp, pkg } = projectConfig;\n\n  const bundles = await bundleProductionMetroClientAsync(\n    projectRoot,\n    exp,\n    {\n      // If not legacy, ignore the target option to prevent warnings from being thrown.\n      resetCache: bundleOptions.clear,\n      maxWorkers: bundleOptions.maxWorkers,\n    },\n    bundleOptions.platforms.map((platform: Platform) => ({\n      platform,\n      entryPoint:\n        bundleOptions.entryPoint ?? getEntryWithServerRoot(projectRoot, { platform, pkg }),\n      sourcemaps: bundleOptions.sourcemaps,\n      minify: bundleOptions.minify,\n      dev: bundleOptions.dev,\n    }))\n  );\n\n  // { ios: bundle, android: bundle }\n  return bundleOptions.platforms.reduce<Partial<Record<Platform, BundleOutput>>>(\n    (prev, platform, index) => ({\n      ...prev,\n      [platform]: bundles[index],\n    }),\n    {}\n  );\n}\n\nasync function bundleProductionMetroClientAsync(\n  projectRoot: string,\n  expoConfig: ExpoConfig,\n  metroOptions: MetroDevServerOptions,\n  bundles: BundleOptions[]\n): Promise<BundleOutput[]> {\n  // Assert early so the user doesn't have to wait until bundling is complete to find out that\n  // Hermes won't be available.\n  await Promise.all(\n    bundles.map(({ platform }) => assertEngineMismatchAsync(projectRoot, expoConfig, platform))\n  );\n\n  const { config, reporter } = await loadMetroConfigAsync(projectRoot, metroOptions, {\n    exp: expoConfig,\n    isExporting: true,\n  });\n\n  const metroServer = await Metro.runMetro(config, {\n    watch: false,\n  });\n\n  const buildAsync = async (bundle: BundleOptions): Promise<BundleOutput> => {\n    const buildID = `bundle_${nextBuildID++}_${bundle.platform}`;\n    const isHermes = isEnableHermesManaged(expoConfig, bundle.platform);\n    if (isHermes) {\n      await assertEngineMismatchAsync(projectRoot, expoConfig, bundle.platform);\n    }\n    const bundleOptions: MetroBundleOptions = {\n      ...Server.DEFAULT_BUNDLE_OPTIONS,\n      sourceMapUrl: bundle.sourceMapUrl,\n      ...getMetroDirectBundleOptionsForExpoConfig(projectRoot, expoConfig, {\n        mainModuleName: bundle.entryPoint,\n        platform: bundle.platform,\n        mode: bundle.dev ? 'development' : 'production',\n        engine: isHermes ? 'hermes' : undefined,\n        serializerIncludeMaps: bundle.sourcemaps,\n        // Bundle splitting on web-only for now.\n        // serializerOutput: bundle.platform === 'web' ? 'static' : undefined,\n        serializerOutput: 'static',\n        serializerIncludeBytecode: isHermes,\n        isExporting: true,\n      }),\n      bundleType: 'bundle',\n      inlineSourceMap: false,\n      createModuleIdFactory: config.serializer.createModuleIdFactory,\n      onProgress: (transformedFileCount: number, totalFileCount: number) => {\n        reporter.update({\n          buildID,\n          type: 'bundle_transform_progressed',\n          transformedFileCount,\n          totalFileCount,\n        });\n      },\n    };\n\n    const bundleDetails = {\n      ...bundleOptions,\n      buildID,\n    };\n    reporter.update({\n      buildID,\n      type: 'bundle_build_started',\n      bundleDetails,\n    });\n    try {\n      const artifacts = await forkMetroBuildAsync(metroServer, bundleOptions);\n      reporter.update({\n        buildID,\n        type: 'bundle_build_done',\n      });\n      return artifacts;\n    } catch (error) {\n      reporter.update({\n        buildID,\n        type: 'bundle_build_failed',\n      });\n\n      throw error;\n    }\n  };\n\n  try {\n    return await Promise.all(bundles.map((bundle) => buildAsync(bundle)));\n  } catch (error) {\n    // New line so errors don't show up inline with the progress bar\n    console.log('');\n    throw error;\n  } finally {\n    metroServer.end();\n  }\n}\n\n// Forked out of Metro because the `this._getServerRootDir()` doesn't match the development\n// behavior.\nexport async function getAssets(metro: Metro.Server, options: MetroBundleOptions) {\n  const { entryFile, onProgress, resolverOptions, transformOptions } = splitBundleOptions(options);\n\n  // @ts-expect-error: _bundler isn't exposed on the type.\n  const dependencies = await metro._bundler.getDependencies(\n    [entryFile],\n    transformOptions,\n    resolverOptions,\n    { onProgress, shallow: false, lazy: false }\n  );\n\n  // @ts-expect-error\n  const _config = metro._config as ConfigT;\n\n  return getMetroAssets(dependencies, {\n    processModuleFilter: _config.serializer.processModuleFilter,\n    assetPlugins: _config.transformer.assetPlugins,\n    platform: transformOptions.platform!,\n    projectRoot: _config.projectRoot, // this._getServerRootDir(),\n    publicPath: _config.transformer.publicPath,\n  });\n}\n\nfunction isMetroServerInstance(metro: Metro.Server): metro is Metro.Server & {\n  _shouldAddModuleToIgnoreList: (module: Module<MixedOutput>) => boolean;\n  _bundler: IncrementalBundler;\n  _config: ConfigT;\n  _createModuleId: (path: string) => number;\n  _resolveRelativePath(\n    filePath: string,\n    {\n      relativeTo,\n      resolverOptions,\n      transformOptions,\n    }: {\n      relativeTo: 'project' | 'server';\n      resolverOptions: ResolverInputOptions;\n      transformOptions: TransformInputOptions;\n    }\n  ): Promise<string>;\n  _getEntryPointAbsolutePath(entryFile: string): string;\n  _getSortedModules(graph: ReadOnlyGraph): Module<MixedOutput>[];\n} {\n  return '_shouldAddModuleToIgnoreList' in metro;\n}\n\nasync function forkMetroBuildAsync(\n  metro: Metro.Server,\n  options: ExpoMetroBundleOptions\n): Promise<{ artifacts: SerialAsset[]; assets: readonly BundleAssetWithFileHashes[] }> {\n  if (!isMetroServerInstance(metro)) {\n    throw new Error('Expected Metro server instance to have private functions exposed.');\n  }\n\n  if (options.serializerOptions?.output !== 'static') {\n    throw new Error('Only multi-serializer output is supported.');\n  }\n\n  const {\n    entryFile,\n    graphOptions,\n    onProgress,\n    resolverOptions,\n    serializerOptions,\n    transformOptions,\n  } = splitBundleOptions(options);\n\n  const { prepend, graph } = await metro._bundler.buildGraph(\n    entryFile,\n    transformOptions,\n    resolverOptions,\n    {\n      onProgress,\n      shallow: graphOptions.shallow,\n      // @ts-expect-error\n      lazy: graphOptions.lazy,\n    }\n  );\n\n  const entryPoint = metro._getEntryPointAbsolutePath(entryFile);\n\n  const bundleOptions = {\n    asyncRequireModulePath: await metro._resolveRelativePath(\n      metro._config.transformer.asyncRequireModulePath,\n      {\n        relativeTo: 'project',\n        resolverOptions,\n        transformOptions,\n      }\n    ),\n    processModuleFilter: metro._config.serializer.processModuleFilter,\n    createModuleId: metro._createModuleId,\n    getRunModuleStatement: metro._config.serializer.getRunModuleStatement,\n    dev: transformOptions.dev,\n    includeAsyncPaths: graphOptions.lazy,\n    projectRoot: metro._config.projectRoot,\n    modulesOnly: serializerOptions.modulesOnly,\n    runBeforeMainModule: metro._config.serializer.getModulesRunBeforeMainModule(\n      path.relative(metro._config.projectRoot, entryPoint)\n    ),\n    runModule: serializerOptions.runModule,\n    sourceMapUrl: serializerOptions.sourceMapUrl,\n    sourceUrl: serializerOptions.sourceUrl,\n    inlineSourceMap: serializerOptions.inlineSourceMap,\n    serverRoot: metro._config.server.unstable_serverRoot ?? metro._config.projectRoot,\n    shouldAddToIgnoreList: (module: Module<MixedOutput>) =>\n      metro._shouldAddModuleToIgnoreList(module),\n    // Custom options we pass to the serializer to emulate the URL query parameters.\n    serializerOptions: options.serializerOptions,\n  };\n\n  const bundle = await metro._config.serializer.customSerializer!(\n    entryPoint,\n    // @ts-expect-error: Metro is typed incorrectly\n    prepend,\n    graph,\n    bundleOptions\n  );\n\n  try {\n    const parsed = typeof bundle === 'string' ? JSON.parse(bundle) : bundle;\n\n    assert(\n      'artifacts' in parsed && Array.isArray(parsed.artifacts),\n      'Expected serializer to return an object with key artifacts to contain an array of serial assets.'\n    );\n    return parsed;\n  } catch (error: any) {\n    throw new Error(\n      'Serializer did not return expected format. The project copy of `expo/metro-config` may be out of date. Error: ' +\n        error.message\n    );\n  }\n}\n"],"names":["createBundlesAsync","getAssets","nextBuildID","assertEngineMismatchAsync","projectRoot","exp","platform","isHermesManaged","isEnableHermesManaged","paths","getConfigFilePaths","configFilePath","dynamicConfigPath","staticConfigPath","maybeThrowFromInconsistentEngineAsync","projectConfig","bundleOptions","platforms","length","pkg","bundles","bundleProductionMetroClientAsync","resetCache","clear","maxWorkers","map","entryPoint","getEntryWithServerRoot","sourcemaps","minify","dev","reduce","prev","index","expoConfig","metroOptions","Promise","all","config","reporter","loadMetroConfigAsync","isExporting","metroServer","Metro","runMetro","watch","buildAsync","bundle","buildID","isHermes","Server","DEFAULT_BUNDLE_OPTIONS","sourceMapUrl","getMetroDirectBundleOptionsForExpoConfig","mainModuleName","mode","engine","undefined","serializerIncludeMaps","serializerOutput","serializerIncludeBytecode","bundleType","inlineSourceMap","createModuleIdFactory","serializer","onProgress","transformedFileCount","totalFileCount","update","type","bundleDetails","artifacts","forkMetroBuildAsync","error","console","log","end","metro","options","entryFile","resolverOptions","transformOptions","splitBundleOptions","dependencies","_bundler","getDependencies","shallow","lazy","_config","getMetroAssets","processModuleFilter","assetPlugins","transformer","publicPath","isMetroServerInstance","Error","serializerOptions","output","graphOptions","prepend","graph","buildGraph","_getEntryPointAbsolutePath","asyncRequireModulePath","_resolveRelativePath","relativeTo","createModuleId","_createModuleId","getRunModuleStatement","includeAsyncPaths","modulesOnly","runBeforeMainModule","getModulesRunBeforeMainModule","path","relative","runModule","sourceUrl","serverRoot","server","unstable_serverRoot","shouldAddToIgnoreList","module","_shouldAddModuleToIgnoreList","customSerializer","parsed","JSON","parse","assert","Array","isArray","message"],"mappings":"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"}
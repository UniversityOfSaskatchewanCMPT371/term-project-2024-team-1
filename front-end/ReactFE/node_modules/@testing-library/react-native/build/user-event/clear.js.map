{"version":3,"file":"clear.js","names":["_errors","require","_hostComponentNames","_textInput","_pointerEvents","_eventBuilder","_utils","_type","clear","element","isHostTextInput","ErrorWithStack","type","isTextInputEditable","isPointerEventEnabled","dispatchEvent","EventBuilder","Common","focus","previousText","props","value","defaultValue","selectionRange","start","end","length","TextInput","selectionChange","finalText","emitTypingEvents","config","wait","endEditing","blur"],"sources":["../../src/user-event/clear.ts"],"sourcesContent":["import { ReactTestInstance } from 'react-test-renderer';\nimport { ErrorWithStack } from '../helpers/errors';\nimport { isHostTextInput } from '../helpers/host-component-names';\nimport { isTextInputEditable } from '../helpers/text-input';\nimport { isPointerEventEnabled } from '../helpers/pointer-events';\nimport { EventBuilder } from './event-builder';\nimport { UserEventInstance } from './setup';\nimport { dispatchEvent, wait } from './utils';\nimport { emitTypingEvents } from './type/type';\n\nexport async function clear(\n  this: UserEventInstance,\n  element: ReactTestInstance\n): Promise<void> {\n  if (!isHostTextInput(element)) {\n    throw new ErrorWithStack(\n      `clear() only supports host \"TextInput\" elements. Passed element has type: \"${element.type}\".`,\n      clear\n    );\n  }\n\n  if (!isTextInputEditable(element) || !isPointerEventEnabled(element)) {\n    return;\n  }\n\n  // 1. Enter element\n  dispatchEvent(element, 'focus', EventBuilder.Common.focus());\n\n  // 2. Select all\n  const previousText = element.props.value ?? element.props.defaultValue ?? '';\n  const selectionRange = {\n    start: 0,\n    end: previousText.length,\n  };\n  dispatchEvent(\n    element,\n    'selectionChange',\n    EventBuilder.TextInput.selectionChange(selectionRange)\n  );\n\n  // 3. Press backspace\n  const finalText = '';\n  await emitTypingEvents(\n    this.config,\n    element,\n    'Backspace',\n    finalText,\n    previousText\n  );\n\n  // 4. Exit element\n  await wait(this.config);\n  dispatchEvent(\n    element,\n    'endEditing',\n    EventBuilder.TextInput.endEditing(finalText)\n  );\n\n  dispatchEvent(element, 'blur', EventBuilder.Common.blur());\n}\n"],"mappings":";;;;;;AACA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,mBAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAF,OAAA;AACA,IAAAG,cAAA,GAAAH,OAAA;AACA,IAAAI,aAAA,GAAAJ,OAAA;AAEA,IAAAK,MAAA,GAAAL,OAAA;AACA,IAAAM,KAAA,GAAAN,OAAA;AAEO,eAAeO,KAAKA,CAEzBC,OAA0B,EACX;EACf,IAAI,CAAC,IAAAC,mCAAe,EAACD,OAAO,CAAC,EAAE;IAC7B,MAAM,IAAIE,sBAAc,CACrB,8EAA6EF,OAAO,CAACG,IAAK,IAAG,EAC9FJ,KACF,CAAC;EACH;EAEA,IAAI,CAAC,IAAAK,8BAAmB,EAACJ,OAAO,CAAC,IAAI,CAAC,IAAAK,oCAAqB,EAACL,OAAO,CAAC,EAAE;IACpE;EACF;;EAEA;EACA,IAAAM,oBAAa,EAACN,OAAO,EAAE,OAAO,EAAEO,0BAAY,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;;EAE5D;EACA,MAAMC,YAAY,GAAGV,OAAO,CAACW,KAAK,CAACC,KAAK,IAAIZ,OAAO,CAACW,KAAK,CAACE,YAAY,IAAI,EAAE;EAC5E,MAAMC,cAAc,GAAG;IACrBC,KAAK,EAAE,CAAC;IACRC,GAAG,EAAEN,YAAY,CAACO;EACpB,CAAC;EACD,IAAAX,oBAAa,EACXN,OAAO,EACP,iBAAiB,EACjBO,0BAAY,CAACW,SAAS,CAACC,eAAe,CAACL,cAAc,CACvD,CAAC;;EAED;EACA,MAAMM,SAAS,GAAG,EAAE;EACpB,MAAM,IAAAC,sBAAgB,EACpB,IAAI,CAACC,MAAM,EACXtB,OAAO,EACP,WAAW,EACXoB,SAAS,EACTV,YACF,CAAC;;EAED;EACA,MAAM,IAAAa,WAAI,EAAC,IAAI,CAACD,MAAM,CAAC;EACvB,IAAAhB,oBAAa,EACXN,OAAO,EACP,YAAY,EACZO,0BAAY,CAACW,SAAS,CAACM,UAAU,CAACJ,SAAS,CAC7C,CAAC;EAED,IAAAd,oBAAa,EAACN,OAAO,EAAE,MAAM,EAAEO,0BAAY,CAACC,MAAM,CAACiB,IAAI,CAAC,CAAC,CAAC;AAC5D"}
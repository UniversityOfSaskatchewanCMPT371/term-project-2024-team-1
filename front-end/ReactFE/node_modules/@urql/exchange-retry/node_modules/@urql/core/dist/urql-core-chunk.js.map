{"version":3,"file":"urql-core-chunk.js","sources":["../src/utils/error.ts","../src/utils/hash.ts","../src/utils/variables.ts","../src/utils/request.ts","../src/utils/result.ts","../src/internal/fetchOptions.ts","../src/internal/fetchSource.ts"],"sourcesContent":["import { GraphQLError } from '@0no-co/graphql.web';\nimport type { ErrorLike } from '../types';\n\nconst generateErrorMessage = (\n  networkErr?: Error,\n  graphQlErrs?: GraphQLError[]\n) => {\n  let error = '';\n  if (networkErr) return `[Network] ${networkErr.message}`;\n  if (graphQlErrs) {\n    for (const err of graphQlErrs) {\n      if (error) error += '\\n';\n      error += `[GraphQL] ${err.message}`;\n    }\n  }\n  return error;\n};\n\nconst rehydrateGraphQlError = (error: any): GraphQLError => {\n  if (\n    error &&\n    error.message &&\n    (error.extensions || error.name === 'GraphQLError')\n  ) {\n    return error;\n  } else if (typeof error === 'object' && error.message) {\n    return new GraphQLError(\n      error.message,\n      error.nodes,\n      error.source,\n      error.positions,\n      error.path,\n      error,\n      error.extensions || {}\n    );\n  } else {\n    return new GraphQLError(error as any);\n  }\n};\n\n/** An abstracted `Error` that provides either a `networkError` or `graphQLErrors`.\n *\n * @remarks\n * During a GraphQL request, either the request can fail entirely, causing a network error,\n * or the GraphQL execution or fields can fail, which will cause an {@link ExecutionResult}\n * to contain an array of GraphQL errors.\n *\n * The `CombinedError` abstracts and normalizes both failure cases. When {@link OperationResult.error}\n * is set to this error, the `CombinedError` abstracts all errors, making it easier to handle only\n * a subset of error cases.\n *\n * @see {@link https://urql.dev/goto/docs/basics/errors} for more information on handling\n * GraphQL errors and the `CombinedError`.\n */\nexport class CombinedError extends Error {\n  public name: string;\n  public message: string;\n\n  /** A list of GraphQL errors rehydrated from a {@link ExecutionResult}.\n   *\n   * @remarks\n   * If an {@link ExecutionResult} received from the API contains a list of errors,\n   * the `CombinedError` will rehydrate them, normalize them to\n   * {@link GraphQLError | GraphQLErrors} and list them here.\n   * An empty list indicates that no GraphQL error has been sent by the API.\n   */\n  public graphQLErrors: GraphQLError[];\n\n  /** Set to an error, if a GraphQL request has failed outright.\n   *\n   * @remarks\n   * A GraphQL over HTTP request may fail and not reach the API. Any error that\n   * prevents a GraphQl request outright, will be considered a “network error” and\n   * set here.\n   */\n  public networkError?: Error;\n\n  /** Set to the {@link Response} object a fetch exchange received.\n   *\n   * @remarks\n   * If a built-in fetch {@link Exchange} is used in `urql`, this may\n   * be set to the {@link Response} object of the Fetch API response.\n   * However, since `urql` doesn’t assume that all users will use HTTP\n   * as the only or exclusive transport for GraphQL this property is\n   * neither typed nor guaranteed and may be re-used for other purposes\n   * by non-fetch exchanges.\n   *\n   * Hint: It can be useful to use `response.status` here, however, if\n   * you plan on relying on this being a {@link Response} in your app,\n   * which it is by default, then make sure you add some extra checks\n   * before blindly assuming so!\n   */\n  public response?: any;\n\n  constructor(input: {\n    networkError?: Error;\n    graphQLErrors?: Array<string | ErrorLike>;\n    response?: any;\n  }) {\n    const normalizedGraphQLErrors = (input.graphQLErrors || []).map(\n      rehydrateGraphQlError\n    );\n    const message = generateErrorMessage(\n      input.networkError,\n      normalizedGraphQLErrors\n    );\n\n    super(message);\n\n    this.name = 'CombinedError';\n    this.message = message;\n    this.graphQLErrors = normalizedGraphQLErrors;\n    this.networkError = input.networkError;\n    this.response = input.response;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n","/** A hash value as computed by {@link phash}.\n *\n * @remarks\n * Typically `HashValue`s are used as hashes and keys of GraphQL documents,\n * variables, and combined, for GraphQL requests.\n */\nexport type HashValue = number & {\n  /** Marker to indicate that a `HashValue` may not be created by a user.\n   *\n   * @remarks\n   * `HashValue`s are created by {@link phash} and are marked as such to not mix them\n   * up with other numbers and prevent them from being created or used outside of this\n   * hashing function.\n   *\n   * @internal\n   */\n  readonly _opaque: unique symbol;\n};\n\n/** Computes a djb2 hash of the given string.\n *\n * @param x - the string to be hashed\n * @param seed - optionally a prior hash for progressive hashing\n * @returns a hash value, i.e. a number\n *\n * @remark\n * This is the hashing function used throughout `urql`, primarily to compute\n * {@link Operation.key}.\n *\n * @see {@link http://www.cse.yorku.ca/~oz/hash.html#djb2} for a further description of djb2.\n */\nexport const phash = (x: string, seed?: HashValue): HashValue => {\n  let h = (seed || 5381) | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++)\n    h = (h << 5) + h + x.charCodeAt(i);\n  return h as HashValue;\n};\n","export type FileMap = Map<string, File | Blob>;\n\nconst seen = new Set();\nconst cache = new WeakMap();\n\nconst stringify = (x: any): string => {\n  if (x === null || seen.has(x)) {\n    return 'null';\n  } else if (typeof x !== 'object') {\n    return JSON.stringify(x) || '';\n  } else if (x.toJSON) {\n    return stringify(x.toJSON());\n  } else if (Array.isArray(x)) {\n    let out = '[';\n    for (const value of x) {\n      if (out.length > 1) out += ',';\n      out += stringify(value) || 'null';\n    }\n    out += ']';\n    return out;\n  } else if (\n    (FileConstructor !== NoopConstructor && x instanceof FileConstructor) ||\n    (BlobConstructor !== NoopConstructor && x instanceof BlobConstructor)\n  ) {\n    return 'null';\n  }\n\n  const keys = Object.keys(x).sort();\n  if (\n    !keys.length &&\n    x.constructor &&\n    Object.getPrototypeOf(x).constructor !== Object.prototype.constructor\n  ) {\n    const key = cache.get(x) || Math.random().toString(36).slice(2);\n    cache.set(x, key);\n    return stringify({ __key: key });\n  }\n\n  seen.add(x);\n  let out = '{';\n  for (const key of keys) {\n    const value = stringify(x[key]);\n    if (value) {\n      if (out.length > 1) out += ',';\n      out += stringify(key) + ':' + value;\n    }\n  }\n\n  seen.delete(x);\n  out += '}';\n  return out;\n};\n\nconst extract = (map: FileMap, path: string, x: any) => {\n  if (x == null || typeof x !== 'object' || x.toJSON || seen.has(x)) {\n    /*noop*/\n  } else if (Array.isArray(x)) {\n    for (let i = 0, l = x.length; i < l; i++)\n      extract(map, `${path}.${i}`, x[i]);\n  } else if (x instanceof FileConstructor || x instanceof BlobConstructor) {\n    map.set(path, x as File | Blob);\n  } else {\n    seen.add(x);\n    for (const key of Object.keys(x)) extract(map, `${path}.${key}`, x[key]);\n  }\n};\n\n/** A stable stringifier for GraphQL variables objects.\n *\n * @param x - any JSON-like data.\n * @return A JSON string.\n *\n * @remarks\n * This utility creates a stable JSON string from any passed data,\n * and protects itself from throwing.\n *\n * The JSON string is stable insofar as objects’ keys are sorted,\n * and instances of non-plain objects are replaced with random keys\n * replacing their values, which remain stable for the objects’\n * instance.\n */\nexport const stringifyVariables = (x: any): string => {\n  seen.clear();\n  return stringify(x);\n};\n\nclass NoopConstructor {}\nconst FileConstructor = typeof File !== 'undefined' ? File : NoopConstructor;\nconst BlobConstructor = typeof Blob !== 'undefined' ? Blob : NoopConstructor;\n\nexport const extractFiles = (x: any): FileMap => {\n  const map: FileMap = new Map();\n  if (\n    FileConstructor !== NoopConstructor ||\n    BlobConstructor !== NoopConstructor\n  ) {\n    seen.clear();\n    extract(map, 'variables', x);\n  }\n  return map;\n};\n","import { Kind, parse, print } from '@0no-co/graphql.web';\nimport type { DocumentNode, DefinitionNode } from './graphql';\nimport type { HashValue } from './hash';\nimport { phash } from './hash';\nimport { stringifyVariables } from './variables';\n\nimport type {\n  DocumentInput,\n  TypedDocumentNode,\n  AnyVariables,\n  GraphQLRequest,\n  RequestExtensions,\n} from '../types';\n\n/** A `DocumentNode` annotated with its hashed key.\n * @internal\n */\nexport type KeyedDocumentNode = TypedDocumentNode & {\n  __key: HashValue;\n};\n\nconst SOURCE_NAME = 'gql';\nconst GRAPHQL_STRING_RE = /(\"{3}[\\s\\S]*\"{3}|\"(?:\\\\.|[^\"])*\")/g;\nconst REPLACE_CHAR_RE = /(?:#[^\\n\\r]+)?(?:[\\r\\n]+|$)/g;\n\nconst replaceOutsideStrings = (str: string, idx: number) =>\n  idx % 2 === 0 ? str.replace(REPLACE_CHAR_RE, '\\n') : str;\n\n/** Sanitizes a GraphQL document string by replacing comments and redundant newlines in it. */\nconst sanitizeDocument = (node: string): string =>\n  node.split(GRAPHQL_STRING_RE).map(replaceOutsideStrings).join('').trim();\n\nconst prints = new Map<DocumentNode | DefinitionNode, string>();\nconst docs = new Map<HashValue, KeyedDocumentNode>();\n\n/** A cached printing function for GraphQL documents.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A normalized printed string of the passed GraphQL document.\n *\n * @remarks\n * This function accepts a GraphQL query string or {@link DocumentNode},\n * then prints and sanitizes it. The sanitizer takes care of removing\n * comments, which otherwise alter the key of the document although the\n * document is otherwise equivalent to another.\n *\n * When a {@link DocumentNode} is passed to this function, it caches its\n * output by modifying the `loc.source.body` property on the GraphQL node.\n */\nexport const stringifyDocument = (\n  node: string | DefinitionNode | DocumentNode\n): string => {\n  let printed: string;\n  if (typeof node === 'string') {\n    printed = sanitizeDocument(node);\n  } else if (node.loc && docs.get((node as KeyedDocumentNode).__key) === node) {\n    printed = node.loc.source.body;\n  } else {\n    printed = prints.get(node) || sanitizeDocument(print(node));\n    prints.set(node, printed);\n  }\n\n  if (typeof node !== 'string' && !node.loc) {\n    (node as any).loc = {\n      start: 0,\n      end: printed.length,\n      source: {\n        body: printed,\n        name: SOURCE_NAME,\n        locationOffset: { line: 1, column: 1 },\n      },\n    };\n  }\n\n  return printed;\n};\n\n/** Computes the hash for a document's string using {@link stringifyDocument}'s output.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link HashValue}\n *\n * @privateRemarks\n * This function adds the operation name of the document to the hash, since sometimes\n * a merged document with multiple operations may be used. Although `urql` requires a\n * `DocumentNode` to only contain a single operation, when the cached `loc.source.body`\n * of a `DocumentNode` is used, this string may still contain multiple operations and\n * the resulting hash should account for only one at a time.\n */\nconst hashDocument = (\n  node: string | DefinitionNode | DocumentNode\n): HashValue => {\n  let key = phash(stringifyDocument(node));\n  // Add the operation name to the produced hash\n  if ((node as DocumentNode).definitions) {\n    const operationName = getOperationName(node as DocumentNode);\n    if (operationName) key = phash(`\\n# ${operationName}`, key);\n  }\n  return key;\n};\n\n/** Returns a canonical version of the passed `DocumentNode` with an added hash key.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link KeyedDocumentNode}\n *\n * @remarks\n * `urql` will always avoid unnecessary work, no matter whether a user passes `DocumentNode`s\n * or strings of GraphQL documents to its APIs.\n *\n * This function will return a canonical version of a {@link KeyedDocumentNode} no matter\n * which kind of input is passed, avoiding parsing or hashing of passed data as needed.\n */\nexport const keyDocument = (node: string | DocumentNode): KeyedDocumentNode => {\n  let key: HashValue;\n  let query: DocumentNode;\n  if (typeof node === 'string') {\n    key = hashDocument(node);\n    query = docs.get(key) || parse(node, { noLocation: true });\n  } else {\n    key = (node as KeyedDocumentNode).__key || hashDocument(node);\n    query = docs.get(key) || node;\n  }\n\n  // Add location information if it's missing\n  if (!query.loc) stringifyDocument(query);\n\n  (query as KeyedDocumentNode).__key = key;\n  docs.set(key, query as KeyedDocumentNode);\n  return query as KeyedDocumentNode;\n};\n\n/** Creates a `GraphQLRequest` from the passed parameters.\n *\n * @param q - A string of a document or a {@link DocumentNode}\n * @param variables - A variables object for the defined GraphQL operation.\n * @returns A {@link GraphQLRequest}\n *\n * @remarks\n * `createRequest` creates a {@link GraphQLRequest} from the passed parameters,\n * while replacing the document as needed with a canonical version of itself,\n * to avoid parsing, printing, or hashing the same input multiple times.\n *\n * If no variables are passed, canonically it'll default to an empty object,\n * which is removed from the resulting hash key.\n */\nexport const createRequest = <\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(\n  _query: DocumentInput<Data, Variables>,\n  _variables: Variables,\n  extensions?: RequestExtensions | undefined\n): GraphQLRequest<Data, Variables> => {\n  const variables = _variables || ({} as Variables);\n  const query = keyDocument(_query);\n  const printedVars = stringifyVariables(variables);\n  let key = query.__key;\n  if (printedVars !== '{}') key = phash(printedVars, key);\n  return { key, query, variables, extensions };\n};\n\n/** Returns the name of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's name contained within the document, or `undefined`\n */\nexport const getOperationName = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.name ? node.name.value : undefined;\n    }\n  }\n};\n\n/** Returns the type of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's type contained within the document, or `undefined`\n */\nexport const getOperationType = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.operation;\n    }\n  }\n};\n","import type {\n  ExecutionResult,\n  Operation,\n  OperationResult,\n  IncrementalPayload,\n} from '../types';\nimport { CombinedError } from './error';\n\n/** Converts the `ExecutionResult` received for a given `Operation` to an `OperationResult`.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param result - The GraphQL API’s {@link ExecutionResult}.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n *\n * @throws\n * If no data, or errors are contained within the result, or the result is instead an incremental\n * response containing a `path` property, a “No Content” error is thrown.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const makeResult = (\n  operation: Operation,\n  result: ExecutionResult,\n  response?: any\n): OperationResult => {\n  if (\n    !('data' in result) &&\n    (!('errors' in result) || !Array.isArray(result.errors))\n  ) {\n    throw new Error('No Content');\n  }\n\n  const defaultHasNext = operation.kind === 'subscription';\n  return {\n    operation,\n    data: result.data,\n    error: Array.isArray(result.errors)\n      ? new CombinedError({\n          graphQLErrors: result.errors,\n          response,\n        })\n      : undefined,\n    extensions: result.extensions ? { ...result.extensions } : undefined,\n    hasNext: result.hasNext == null ? defaultHasNext : result.hasNext,\n    stale: false,\n  };\n};\n\nconst deepMerge = (target: any, source: any) => {\n  if (typeof target === 'object' && target != null) {\n    if (\n      !target.constructor ||\n      target.constructor === Object ||\n      Array.isArray(target)\n    ) {\n      target = Array.isArray(target) ? [...target] : { ...target };\n      for (const key of Object.keys(source))\n        target[key] = deepMerge(target[key], source[key]);\n      return target;\n    }\n  }\n  return source;\n};\n\n/** Merges an incrementally delivered `ExecutionResult` into a previous `OperationResult`.\n *\n * @param prevResult - The {@link OperationResult} that preceded this result.\n * @param path - The GraphQL API’s {@link ExecutionResult} that should be patching the `prevResult`.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns A new {@link OperationResult} patched with the incremental result.\n *\n * @remarks\n * This utility should be used to merge subsequent {@link ExecutionResult | ExecutionResults} of\n * incremental responses into a prior {@link OperationResult}.\n *\n * When directives like `@defer`, `@stream`, and `@live` are used, GraphQL may deliver new\n * results that modify previous results. In these cases, it'll set a `path` property to modify\n * the result it sent last. This utility is built to handle these cases and merge these payloads\n * into existing {@link OperationResult | OperationResults}.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const mergeResultPatch = (\n  prevResult: OperationResult,\n  nextResult: ExecutionResult,\n  response?: any,\n  pending?: ExecutionResult['pending']\n): OperationResult => {\n  let errors = prevResult.error ? prevResult.error.graphQLErrors : [];\n  let hasExtensions = !!prevResult.extensions || !!nextResult.extensions;\n  const extensions = { ...prevResult.extensions, ...nextResult.extensions };\n\n  let incremental = nextResult.incremental;\n\n  // NOTE: We handle the old version of the incremental delivery payloads as well\n  if ('path' in nextResult) {\n    incremental = [nextResult as IncrementalPayload];\n  }\n\n  const withData = { data: prevResult.data };\n  if (incremental) {\n    for (const patch of incremental) {\n      if (Array.isArray(patch.errors)) {\n        errors.push(...(patch.errors as any));\n      }\n\n      if (patch.extensions) {\n        Object.assign(extensions, patch.extensions);\n        hasExtensions = true;\n      }\n\n      let prop: string | number = 'data';\n      let part: Record<string, any> | Array<any> = withData;\n      let path: readonly (string | number)[] = [];\n      if (patch.path) {\n        path = patch.path;\n      } else if (pending) {\n        const res = pending.find(pendingRes => pendingRes.id === patch.id);\n        if (patch.subPath) {\n          path = [...res!.path, ...patch.subPath];\n        } else {\n          path = res!.path;\n        }\n      }\n\n      for (let i = 0, l = path.length; i < l; prop = path[i++]) {\n        part = part[prop] = Array.isArray(part[prop])\n          ? [...part[prop]]\n          : { ...part[prop] };\n      }\n\n      if (patch.items) {\n        const startIndex = +prop >= 0 ? (prop as number) : 0;\n        for (let i = 0, l = patch.items.length; i < l; i++)\n          part[startIndex + i] = deepMerge(\n            part[startIndex + i],\n            patch.items[i]\n          );\n      } else if (patch.data !== undefined) {\n        part[prop] = deepMerge(part[prop], patch.data);\n      }\n    }\n  } else {\n    withData.data = nextResult.data || prevResult.data;\n    errors = (nextResult.errors as any[]) || errors;\n  }\n\n  return {\n    operation: prevResult.operation,\n    data: withData.data,\n    error: errors.length\n      ? new CombinedError({ graphQLErrors: errors, response })\n      : undefined,\n    extensions: hasExtensions ? extensions : undefined,\n    hasNext:\n      nextResult.hasNext != null ? nextResult.hasNext : prevResult.hasNext,\n    stale: false,\n  };\n};\n\n/** Creates an `OperationResult` containing a network error for requests that encountered unexpected errors.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param error - The network-like error that prevented an API result from being delivered.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult} containing only a {@link CombinedError}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n * This function should be used for when the {@link CombinedError.networkError} property is\n * populated and no GraphQL execution actually occurred.\n */\nexport const makeErrorResult = (\n  operation: Operation,\n  error: Error,\n  response?: any\n): OperationResult => ({\n  operation,\n  data: undefined,\n  error: new CombinedError({\n    networkError: error,\n    response,\n  }),\n  extensions: undefined,\n  hasNext: false,\n  stale: false,\n});\n","import {\n  stringifyDocument,\n  getOperationName,\n  stringifyVariables,\n  extractFiles,\n} from '../utils';\n\nimport type { AnyVariables, GraphQLRequest, Operation } from '../types';\n\n/** Abstract definition of the JSON data sent during GraphQL HTTP POST requests. */\nexport interface FetchBody {\n  query?: string;\n  operationName: string | undefined;\n  variables: undefined | Record<string, any>;\n  extensions: undefined | Record<string, any>;\n}\n\n/** Creates a GraphQL over HTTP compliant JSON request body.\n * @param request - An object containing a `query` document and `variables`.\n * @returns A {@link FetchBody}\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n */\nexport function makeFetchBody<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(request: Omit<GraphQLRequest<Data, Variables>, 'key'>): FetchBody {\n  const isAPQ =\n    request.extensions &&\n    request.extensions.persistedQuery &&\n    !request.extensions.persistedQuery.miss;\n  return {\n    query: isAPQ ? undefined : stringifyDocument(request.query),\n    operationName: getOperationName(request.query),\n    variables: request.variables || undefined,\n    extensions: request.extensions,\n  };\n}\n\n/** Creates a URL that will be called for a GraphQL HTTP request.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which may be replaced with a URL.\n *\n * @remarks\n * Creates the URL that’ll be called as part of a GraphQL HTTP request.\n * Built-in fetch exchanges support sending GET requests, even for\n * non-persisted full requests, which this function supports by being\n * able to serialize GraphQL requests into the URL.\n */\nexport const makeFetchURL = (\n  operation: Operation,\n  body?: FetchBody\n): string => {\n  const useGETMethod =\n    operation.kind === 'query' && operation.context.preferGetMethod;\n  if (!useGETMethod || !body) return operation.context.url;\n\n  const url = new URL(operation.context.url);\n  for (const key in body) {\n    const value = body[key];\n    if (value) {\n      url.searchParams.set(\n        key,\n        typeof value === 'object' ? stringifyVariables(value) : value\n      );\n    }\n  }\n\n  const finalUrl = url.toString();\n  if (finalUrl.length > 2047 && useGETMethod !== 'force') {\n    operation.context.preferGetMethod = false;\n    return operation.context.url;\n  }\n\n  return finalUrl;\n};\n\n/** Serializes a {@link FetchBody} into a {@link RequestInit.body} format. */\nconst serializeBody = (\n  operation: Operation,\n  body?: FetchBody\n): FormData | string | undefined => {\n  const omitBody =\n    operation.kind === 'query' && !!operation.context.preferGetMethod;\n  if (body && !omitBody) {\n    const json = stringifyVariables(body);\n    const files = extractFiles(body.variables);\n    if (files.size) {\n      const form = new FormData();\n      form.append('operations', json);\n      form.append(\n        'map',\n        stringifyVariables({\n          ...[...files.keys()].map(value => [value]),\n        })\n      );\n      let index = 0;\n      for (const file of files.values()) form.append(`${index++}`, file);\n      return form;\n    }\n    return json;\n  }\n};\n\n/** Creates a `RequestInit` object for a given `Operation`.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which is added to the options, if the request isn’t a GET request.\n *\n * @remarks\n * Creates the fetch options {@link RequestInit} object that’ll be passed to the Fetch API\n * as part of a GraphQL over HTTP request. It automatically sets a default `Content-Type`\n * header.\n *\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport const makeFetchOptions = (\n  operation: Operation,\n  body?: FetchBody\n): RequestInit => {\n  const headers: HeadersInit = {\n    accept:\n      operation.kind === 'subscription'\n        ? 'text/event-stream, multipart/mixed'\n        : 'application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed',\n  };\n  const extraOptions =\n    (typeof operation.context.fetchOptions === 'function'\n      ? operation.context.fetchOptions()\n      : operation.context.fetchOptions) || {};\n  if (extraOptions.headers)\n    for (const key in extraOptions.headers)\n      headers[key.toLowerCase()] = extraOptions.headers[key];\n  const serializedBody = serializeBody(operation, body);\n  if (typeof serializedBody === 'string' && !headers['content-type'])\n    headers['content-type'] = 'application/json';\n  return {\n    ...extraOptions,\n    method: serializedBody ? 'POST' : 'GET',\n    body: serializedBody,\n    headers,\n  };\n};\n","/* Summary: This file handles the HTTP transport via GraphQL over HTTP\n * See: https://graphql.github.io/graphql-over-http/draft/\n *\n * `@urql/core`, by default, implements several RFC'd protocol extensions\n * on top of this. As such, this implementation supports:\n * - [Incremental Delivery](https://github.com/graphql/graphql-over-http/blob/main/rfcs/IncrementalDelivery.md)\n * - [GraphQL over SSE](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverSSE.md)\n *\n * This also supports the \"Defer Stream\" payload format.\n * See: https://github.com/graphql/graphql-wg/blob/main/rfcs/DeferStream.md\n * Implementation for this is located in `../utils/result.ts` in `mergeResultPatch`\n *\n * And; this also supports the GraphQL Multipart spec for file uploads.\n * See: https://github.com/jaydenseric/graphql-multipart-request-spec\n * Implementation for this is located in `../utils/variables.ts` in `extractFiles`,\n * and `./fetchOptions.ts` in `serializeBody`.\n *\n * And; this also supports GET requests (and hence; automatic persisted queries)\n * via the `@urql/exchange-persisted` package.\n *\n * This implementation DOES NOT support Batching.\n * See: https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md\n * Which is deemed out-of-scope, as it's sufficiently unnecessary given\n * modern handling of HTTP requests being in parallel.\n *\n * The implementation in this file needs to make certain accommodations for:\n * - The Web Fetch API\n * - Non-browser or polyfill Fetch APIs\n * - Node.js-like Fetch implementations (see `toString` below)\n *\n * GraphQL over SSE has a reference implementation, which supports non-HTTP/2\n * modes and is a faithful implementation of the spec.\n * See: https://github.com/enisdenjo/graphql-sse\n *\n * GraphQL Inremental Delivery (aka “GraphQL Multipart Responses”) has a\n * reference implementation, which a prior implementation of this file heavily\n * leaned on (See prior attribution comments)\n * See: https://github.com/maraisr/meros\n *\n * This file merges support for all three GraphQL over HTTP response formats\n * via async generators and Wonka’s `fromAsyncIterable`. As part of this, `streamBody`\n * and `split` are the common, cross-compatible base implementations.\n */\n\nimport type { Source } from 'wonka';\nimport { fromAsyncIterable, onEnd, filter, pipe } from 'wonka';\nimport type { Operation, OperationResult, ExecutionResult } from '../types';\nimport { makeResult, makeErrorResult, mergeResultPatch } from '../utils';\n\nconst decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder() : null;\nconst boundaryHeaderRe = /boundary=\"?([^=\";]+)\"?/i;\nconst eventStreamRe = /data: ?([^\\n]+)/;\n\ntype ChunkData = Buffer | Uint8Array;\n\n// NOTE: We're avoiding referencing the `Buffer` global here to prevent\n// auto-polyfilling in Webpack\nconst toString = (input: Buffer | ArrayBuffer): string =>\n  input.constructor.name === 'Buffer'\n    ? (input as Buffer).toString()\n    : decoder!.decode(input as ArrayBuffer);\n\nasync function* streamBody(response: Response): AsyncIterableIterator<string> {\n  if (response.body![Symbol.asyncIterator]) {\n    for await (const chunk of response.body! as any)\n      yield toString(chunk as ChunkData);\n  } else {\n    const reader = response.body!.getReader();\n    let result: ReadableStreamReadResult<ChunkData>;\n    try {\n      while (!(result = await reader.read()).done) yield toString(result.value);\n    } finally {\n      reader.cancel();\n    }\n  }\n}\n\nasync function* split(\n  chunks: AsyncIterableIterator<string>,\n  boundary: string\n): AsyncIterableIterator<string> {\n  let buffer = '';\n  let boundaryIndex: number;\n  for await (const chunk of chunks) {\n    buffer += chunk;\n    while ((boundaryIndex = buffer.indexOf(boundary)) > -1) {\n      yield buffer.slice(0, boundaryIndex);\n      buffer = buffer.slice(boundaryIndex + boundary.length);\n    }\n  }\n}\n\nasync function* parseJSON(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  yield JSON.parse(await response.text());\n}\n\nasync function* parseEventStream(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  let payload: any;\n  for await (const chunk of split(streamBody(response), '\\n\\n')) {\n    const match = chunk.match(eventStreamRe);\n    if (match) {\n      const chunk = match[1];\n      try {\n        yield (payload = JSON.parse(chunk));\n      } catch (error) {\n        if (!payload) throw error;\n      }\n      if (payload && payload.hasNext === false) break;\n    }\n  }\n  if (payload && payload.hasNext !== false) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* parseMultipartMixed(\n  contentType: string,\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  const boundaryHeader = contentType.match(boundaryHeaderRe);\n  const boundary = '--' + (boundaryHeader ? boundaryHeader[1] : '-');\n  let isPreamble = true;\n  let payload: any;\n  for await (let chunk of split(streamBody(response), '\\r\\n' + boundary)) {\n    if (isPreamble) {\n      isPreamble = false;\n      const preambleIndex = chunk.indexOf(boundary);\n      if (preambleIndex > -1) {\n        chunk = chunk.slice(preambleIndex + boundary.length);\n      } else {\n        continue;\n      }\n    }\n    try {\n      yield (payload = JSON.parse(chunk.slice(chunk.indexOf('\\r\\n\\r\\n') + 4)));\n    } catch (error) {\n      if (!payload) throw error;\n    }\n    if (payload && payload.hasNext === false) break;\n  }\n  if (payload && payload.hasNext !== false) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* parseMaybeJSON(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  const text = await response.text();\n  try {\n    const result = JSON.parse(text);\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        `Found response with content-type \"text/plain\" but it had a valid \"application/json\" response.`\n      );\n    }\n    yield result;\n  } catch (e) {\n    throw new Error(text);\n  }\n}\n\nasync function* fetchOperation(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n) {\n  let networkMode = true;\n  let result: OperationResult | null = null;\n  let response: Response | undefined;\n\n  try {\n    // Delay for a tick to give the Client a chance to cancel the request\n    // if a teardown comes in immediately\n    yield await Promise.resolve();\n\n    response = await (operation.context.fetch || fetch)(url, fetchOptions);\n    const contentType = response.headers.get('Content-Type') || '';\n\n    let results: AsyncIterable<ExecutionResult>;\n    if (/multipart\\/mixed/i.test(contentType)) {\n      results = parseMultipartMixed(contentType, response);\n    } else if (/text\\/event-stream/i.test(contentType)) {\n      results = parseEventStream(response);\n    } else if (!/text\\//i.test(contentType)) {\n      results = parseJSON(response);\n    } else {\n      results = parseMaybeJSON(response);\n    }\n\n    let pending: ExecutionResult['pending'];\n    for await (const payload of results) {\n      if (payload.pending && !result) {\n        pending = payload.pending;\n      } else if (payload.pending) {\n        pending = [...pending!, ...payload.pending];\n      }\n      result = result\n        ? mergeResultPatch(result, payload, response, pending)\n        : makeResult(operation, payload, response);\n      networkMode = false;\n      yield result;\n      networkMode = true;\n    }\n\n    if (!result) {\n      yield (result = makeResult(operation, {}, response));\n    }\n  } catch (error: any) {\n    if (!networkMode) {\n      throw error;\n    }\n\n    yield makeErrorResult(\n      operation,\n      response &&\n        (response.status < 200 || response.status >= 300) &&\n        response.statusText\n        ? new Error(response.statusText)\n        : error,\n      response\n    );\n  }\n}\n\n/** Makes a GraphQL HTTP request to a given API by wrapping around the Fetch API.\n *\n * @param operation - The {@link Operation} that should be sent via GraphQL over HTTP.\n * @param url - The endpoint URL for the GraphQL HTTP API.\n * @param fetchOptions - The {@link RequestInit} fetch options for the request.\n * @returns A Wonka {@link Source} of {@link OperationResult | OperationResults}.\n *\n * @remarks\n * This utility defines how all built-in fetch exchanges make GraphQL HTTP requests,\n * supporting multipart incremental responses, cancellation and other smaller\n * implementation details.\n *\n * If you’re implementing a modified fetch exchange for a GraphQL over HTTP API\n * it’s recommended you use this utility.\n *\n * Hint: This function does not use the passed `operation` to create or modify the\n * `fetchOptions` and instead expects that the options have already been created\n * using {@link makeFetchOptions} and modified as needed.\n *\n * @throws\n * If the `fetch` polyfill or globally available `fetch` function doesn’t support\n * streamed multipart responses while trying to handle a `multipart/mixed` GraphQL response,\n * the source will throw “Streaming requests unsupported”.\n * This shouldn’t happen in modern browsers and Node.js.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport function makeFetchSource(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n): Source<OperationResult> {\n  let abortController: AbortController | void;\n  if (typeof AbortController !== 'undefined') {\n    fetchOptions.signal = (abortController = new AbortController()).signal;\n  }\n  return pipe(\n    fromAsyncIterable(fetchOperation(operation, url, fetchOptions)),\n    filter((result): result is OperationResult => !!result),\n    onEnd(() => {\n      if (abortController) abortController.abort();\n    })\n  );\n}\n"],"names":["generateErrorMessage","networkErr","graphQlErrs","error","message","err","rehydrateGraphQlError","extensions","name","GraphQLError","nodes","source","positions","path","CombinedError","Error","constructor","input","normalizedGraphQLErrors","graphQLErrors","map","networkError","response","toString","phash","x","seed","h","i","l","length","charCodeAt","seen","Set","cache","WeakMap","stringify","has","JSON","toJSON","Array","isArray","out","value","FileConstructor","NoopConstructor","BlobConstructor","keys","Object","sort","getPrototypeOf","prototype","key","get","Math","random","slice","set","__key","add","delete","extract","stringifyVariables","clear","File","Blob","extractFiles","Map","SOURCE_NAME","GRAPHQL_STRING_RE","REPLACE_CHAR_RE","replaceOutsideStrings","str","idx","replace","sanitizeDocument","node","split","join","trim","prints","docs","stringifyDocument","printed","loc","body","print","start","end","locationOffset","line","column","hashDocument","definitions","operationName","getOperationName","keyDocument","query","parse","noLocation","createRequest","_query","_variables","variables","printedVars","kind","Kind","OPERATION_DEFINITION","undefined","getOperationType","operation","makeResult","result","errors","defaultHasNext","data","hasNext","stale","deepMerge","target","mergeResultPatch","prevResult","nextResult","pending","hasExtensions","incremental","withData","_loop","patch","push","assign","prop","part","res","find","pendingRes","id","subPath","items","startIndex","makeErrorResult","makeFetchBody","request","isAPQ","persistedQuery","miss","makeFetchURL","useGETMethod","context","preferGetMethod","url","URL","searchParams","finalUrl","serializeBody","omitBody","json","files","size","form","FormData","append","index","file","values","makeFetchOptions","headers","accept","extraOptions","fetchOptions","toLowerCase","serializedBody","method","decoder","TextDecoder","boundaryHeaderRe","eventStreamRe","decode","streamBody","Symbol","asyncIterator","chunk","reader","getReader","read","done","cancel","chunks","boundary","buffer","boundaryIndex","indexOf","parseJSON","text","parseEventStream","payload","match","parseMultipartMixed","contentType","boundaryHeader","isPreamble","preambleIndex","parseMaybeJSON","process","env","NODE_ENV","console","warn","e","fetchOperation","networkMode","Promise","resolve","fetch","results","test","status","statusText","makeFetchSource","abortController","AbortController","signal","onEnd","abort","filter","fromAsyncIterable"],"mappings":"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"}